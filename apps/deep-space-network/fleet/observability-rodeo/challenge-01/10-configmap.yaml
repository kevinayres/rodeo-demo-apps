apiVersion: v1
kind: ConfigMap
metadata:
  name: gravitational-accelerator-code
  namespace: rodeo-lab-1
data:
  gravitational-accelerator.js: |
    const http = require('http');

    // Get maintenance mode status from the environment variable
    const maintenanceMode = process.env.MAINTENANCE_MODE === 'true';

    // Server logic
    const server = http.createServer((req, res) => {
      if (maintenanceMode) {
        console.log('[ERROR] Gravitational Accelerators are offline, Maintenance mode is active. Returning 503 Service Unavailable.');
        res.writeHead(503, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({
          message: 'The Gravitational Accelerator is currently in maintenance mode. Please try again later.',
        }));
      } else {
        console.log('Gravitational Accelerator is generating gravitational waves.');
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({
          message: 'Gravitational Accelerator is running normally.',
        }));
      }
    });

    // Simulate a startup delay
    const PORT = 8080;
    console.log('Starting Gravitational Accelerator...');
    console.log(`Gravitational Accelerator started. Listening on port ${PORT}.`);
    server.listen(PORT, () => console.log(`Generating gravitational waves at http://0.0.0.0:${PORT}`));
  scenario.ts: |
    import http from 'k6/http';
    import { check, sleep } from 'k6';

    export let options = {
      vus: 1,
      stages: [
        { duration: '2m', target: 0 },
        { duration: '30s', target: 4 },
        { duration: '2h', target: 4 }, // long enough for lab to continue running.
      ],
    };

    export default function () {
      let res = http.get('http://gravitational-accelerator.rodeo-lab-1.svc.cluster.local:8080');
      check(res, { 'Tardis operational': (r) => r.status === 200 });
      sleep(1);
    }
